{"version":3,"sources":["../src/map.js"],"names":["_","L","ChoroplethMap","ctrl","mapContainer","circles","createMap","console","log","map","window","GeoJSONBoundedMap","zoomIn","panel","mapping","initialZoom","scrollWheelZoom","disable","tileLayer","attribution","addTo","invalidateSize","zoomFactor","polygons","geojson","geoJSON","zoomToGeometries","remove"],"mappings":";;;;;;;;;;;;;;;AAAOA,O;;AACKC,O;;;;;;;;;;;;;;;;;;;;;AAKSC,mB;AACnB,+BAAYC,IAAZ,EAAkBC,YAAlB,EAAgC;AAAA;;AAC9B,eAAKD,IAAL,GAAYA,IAAZ;AACA,eAAKC,YAAL,GAAoBA,YAApB;AACA,eAAKC,OAAL,GAAe,EAAf;;AAEA,iBAAO,KAAKC,SAAL,EAAP;AACD;;;;sCAEW;AACVC,oBAAQC,GAAR,CAAY,kBAAZ;AACA,iBAAKC,GAAL,GAAW,IAAIC,OAAOT,CAAP,CAASU,iBAAb,CAA+B,KAAKP,YAApC,CAAX;AACA;AACA,iBAAKK,GAAL,CAASG,MAAT,CAAgB,KAAKT,IAAL,CAAUU,KAAV,CAAgBC,OAAhB,CAAwBC,WAAxC;AACA,iBAAKN,GAAL,CAASO,eAAT,CAAyBC,OAAzB;;AAEAP,mBAAOT,CAAP,CAASiB,SAAT,CAAmB,6EAAnB,EAAkG;AAChG;AACAC,2BAAa;AACb;AACA;AAJgG,aAAlG,EAKGC,KALH,CAKS,KAAKX,GALd;AAMD;;;mCAEQ;AACP,iBAAKA,GAAL,CAASY,cAAT;AACD;;;2CAEgB;AACf;AACA;AACD;;;kCAEOC,U,EAAY;AAClB;AACD;;;yCAEc;AACb,gBAAI,KAAKnB,IAAL,CAAUU,KAAV,CAAgBC,OAAhB,CAAwBS,QAA5B,EAAsC;AACpC,mBAAKC,OAAL,GAAed,OAAOT,CAAP,CAASwB,OAAT,CAAiB,KAAKtB,IAAL,CAAUU,KAAV,CAAgBC,OAAhB,CAAwBS,QAAzC,CAAf;AACA,mBAAKC,OAAL,CAAaJ,KAAb,CAAmB,KAAKX,GAAxB;AACA,kBAAI,OAAO,KAAKA,GAAL,CAASiB,gBAAhB,KAAqC,UAAzC,EAAqD;AACnD,qBAAKjB,GAAL,CAASiB,gBAAT,CAA0B,KAAKF,OAA/B;AACD;AACF;AACF;;;mCAEQ;AACP;AACA;AACA;AACA,iBAAKf,GAAL,CAASkB,MAAT;AACD;;;;;;yBApDkBzB,a","file":"map.js","sourcesContent":["import _ from 'lodash';\nimport * as L from './external/leaflet/dist/leaflet';\nimport './external/leaflet-map-zoomToGeometries/dist/leaflet.map.zoomToGeometries.min';\n// import './external/leaflet-choropleth/dist/choropleth';\n\n\nexport default class ChoroplethMap {\n  constructor(ctrl, mapContainer) {\n    this.ctrl = ctrl;\n    this.mapContainer = mapContainer;\n    this.circles = [];\n\n    return this.createMap();\n  }\n\n  createMap() {\n    console.log('initializing map');\n    this.map = new window.L.GeoJSONBoundedMap(this.mapContainer);\n    // this.map.fitWorld();\n    this.map.zoomIn(this.ctrl.panel.mapping.initialZoom);\n    this.map.scrollWheelZoom.disable();\n\n    window.L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png', {\n      // maxZoom: 18,\n      attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> &copy; <a href=\"http://cartodb.com/attributions\">CartoDB</a>',\n      // reuseTiles: true,\n      // detectRetina: true\n    }).addTo(this.map);\n  }\n\n  resize() {\n    this.map.invalidateSize();\n  }\n\n  panToMapCenter() {\n    // this.map.panTo([parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude)]);\n    // this.ctrl.mapCenterMoved = false;\n  }\n\n  setZoom(zoomFactor) {\n    // this.map.setZoom(parseInt(zoomFactor, 10));\n  }\n\n  drawPolygons() {\n    if (this.ctrl.panel.mapping.polygons) {\n      this.geojson = window.L.geoJSON(this.ctrl.panel.mapping.polygons);\n      this.geojson.addTo(this.map);\n      if (typeof this.map.zoomToGeometries === \"function\") {\n        this.map.zoomToGeometries(this.geojson);\n      }\n    }\n  }\n\n  remove() {\n    // this.circles = [];\n    // if (this.circlesLayer) this.removeCircles();\n    // if (this.legend) this.removeLegend();\n    this.map.remove();\n  }\n}\n"]}