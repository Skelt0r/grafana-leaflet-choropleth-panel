{"version":3,"sources":["../src/leaflet_choropleth_ctrl.js"],"names":["MetricsPanelCtrl","moment","_","$","mapRenderer","panelDefaults","polygons","hotColor","coldColor","endpoint","GeoJSONKey","dataSourceTag","mapping","height","initialZoom","datasource","LeafletChoroplethCtrl","$scope","$injector","defaults","panel","id","events","on","onInitEditMode","bind","onDataReceived","onDataError","onPanelTeardown","fetchPolygons","that","window","ajax","url","type","dataType","contentType","crossDomain","success","response","each","features","index","value","properties","choropleth","map","drawPolygons","error","console","log","addEditorTab","dataList","forEach","row","target","substring","indexOf","property","datapoints","redraw","err","remove","render","scope","elem","attrs","ctrl","templateUrl"],"mappings":"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","file":"leaflet_choropleth_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport mapRenderer from './map_renderer';\n\nconst panelDefaults = {\n  polygons: {\n    hotColor: \"rgb(255, 0, 0)\",\n    coldColor: \"rgb(0, 0, 255)\",\n    endpoint:  null,\n    GeoJSONKey: null,\n    dataSourceTag: null,\n  },\n  mapping: {\n    height: 700,\n    initialZoom:1,\n    polygons: null,\n  },\n  datasource: null\n};\n\nexport class LeafletChoroplethCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n    _.defaults(this.panel, panelDefaults);\n    this.panel.mapping.id = 'mapid_' + this.panel.id;\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n  }\n\n  updatePolygons() {\n    this.panel.mapping.polygons = null;\n    this.fetchPolygons();\n  }\n\n  fetchPolygons() {\n    if (this.panel.polygons.endpoint) {\n      if (!this.panel.mapping.polygons) {\n        var that = this;\n        window.$.ajax({\n          url: that.panel.polygons.endpoint,\n          type: \"GET\",\n          dataType: \"json\",\n          contentType: \"application/json\",\n          crossDomain: true,\n          success: function(response) {\n            that.panel.mapping.polygons = response;\n            $.each(that.panel.mapping.polygons.features, function(index, value) {\n              that.panel.mapping.polygons.features[index].properties.choropleth = 0;\n            });\n            if (that.map) {\n              that.map.drawPolygons();\n            }\n          },\n          error: function(response) {\n            console.log(response);\n          },\n        });\n      }\n      else {\n        if (that.map) {\n          that.map.drawPolygons();\n        }\n      }\n    }\n    else {\n      console.log('endpoint is not set');\n    }\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Polygons Options', 'public/plugins/grafana-leaflet-choropleth-panel/polygons_editor.html', 2);\n  }\n\n  onDataReceived(dataList) {\n    if (!dataList || !this.panel.mapping.polygons) return;\n\n    var that = this;\n    $.each(that.panel.mapping.polygons.features, function( index, value ) {\n      that.panel.mapping.polygons.features[index].properties.choropleth = 0;\n    });\n\n    if (this.panel.polygons.GeoJSONKey && this.panel.polygons.dataSourceTag) {\n      dataList.forEach((row) => {\n        var target = row.target.substring(row.target.indexOf('{'));\n        if (target.indexOf(this.panel.polygons.dataSourceTag) > -1) {\n          $.each(that.panel.mapping.polygons.features, function( index, value ) {\n            var property = value.properties[that.panel.polygons.GeoJSONKey];\n            if (target.indexOf(property) > -1) {\n              that.panel.mapping.polygons.features[index].properties.choropleth = row.datapoints[0][0];\n              return false;\n            }\n          });\n        }\n      });\n    }\n    this.redraw();\n  }\n\n  onDataError(err) {\n    this.onDataReceived([]);\n  }\n\n  onPanelTeardown() {\n    if (this.map) this.map.remove();\n  }\n\n  redraw() {\n    if (this.map) {\n      this.map.drawPolygons();\n    }\n    else {\n      this.render();\n    }\n  }\n  link(scope, elem, attrs, ctrl) {\n    mapRenderer(scope, elem, attrs, ctrl);\n  }\n}\n\nLeafletChoroplethCtrl.templateUrl = 'module.html';"]}